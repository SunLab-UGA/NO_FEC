#!/usr/bin/python3
# -*- coding: utf-8 -*-

import zmq
import numpy as np
import time
from datetime import datetime
import os

zmq_ports = [60000,60001,60002] # list all the ports a connnection should be read
zmq_names = ['header_generator','PDU', 'mac_phy_out']
zmq_rx_type = [np.uint8,np.uint8, np.uint8] # list the data types for each port

contexts = []
sockets = []
for p in zmq_ports:
    contexts.append(zmq.Context())
    sockets.append(contexts[-1].socket(zmq.SUB))
    sockets[-1].connect(f"tcp://127.0.0.1:{p}") # connect, not bind, the PUB will bind, only 1 can bind
    sockets[-1].setsockopt(zmq.SUBSCRIBE, b'') # subscribe to topic of all (needed or else it won't work)
    print(f'port subscribed:{p}')

print("Welcome!")

# get the current time and create a file for each subscriber
date = datetime.now().strftime('+%y-%m-%d_%H_%M_%S')
file_names = []
for suffix in zmq_names:
    file_names.append(f"results/log_{date}/{suffix}_{date}.txt")

#make dir if it doesn't exist
os.makedirs(f"results/log_{date}") 

print(file_names)

# take data and write to log file
def write_log(data, log_file):
    date_format = '+%y-%m-%d_%H_%M_%S.%f'
    # write data to log file
    with open(log_file, 'a') as f:
        f.write(f"[{datetime.now().strftime(date_format)}]") # write time
        f.write(' [')
        #f.write(data) # this method will shorten the data if it is too long
        # write data using np.savetxt
        np.savetxt(f, np.array([data]), fmt='%s', delimiter=' ', newline='')
        f.write(']\n')

def poll_socket(socket, type=np.float32, vector_limit=1):
    if socket.poll(10) != 0: # check if there is a message on the socket
        msg = socket.recv() # grab the message
        print("Buffer Length: ",len(msg)) # size of msg
        print()

        # make sure to use correct data type (complex64 or float32); '-1' means read all data in the buffer
        data = np.frombuffer(msg, dtype=type, count=-1) 
        print(data) # the vector length is 52 channels for 802.11a ofdm
        
        # check if data is a list (can happen with overflows?)
        if len(data) > vector_limit:
            data = data[0] #discard the value
            print('WARNING: DATA DISCARD, over the vector limit!')
        return data, True
    else:
        return [0], False 

while True:
    for ii,port in enumerate(sockets):
        # make sure the datatype is valid for the port!
        data,data_valid = poll_socket(socket=port, type=zmq_rx_type[ii], vector_limit=3696)

        if data_valid == True:
            # append the data to a file for post-processing
            # write_log(data=str(data).replace("\n",""),log_file=file_names[ii])
            write_log(data=data,log_file=file_names[ii]) # give raw data to log file
        
        # convert the data to ascii for better interpretation


        else:
            time.sleep(0.1) # wait 100ms and try again